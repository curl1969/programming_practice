# given a LL convert it to arr and then back to LL

def LL_to_arr(A):
	C=[]
    while (A):
      C.append(A.data)
      A = A.next
    return C
  
  
  def arr_to_LL(arr):
      new = Node(arr[0])
      curr = new
      for i in range(1,len(arr)):
        curr.next = Node(arr[i])
        curr = curr.next
      return new
    
    # Given a sorted LL, remove the duplicates and return the head
  def removeduplicates(A):
      head = A
      while A:
        while A.next and A.next.data == A.data:
          A.next = A.next.next
        A = A.next
      return head
    
    # the following func adds a new node along with data at the front of the LL
  def addnode(newdata,head):https://codeshare.io/new
      newnode = Node(newdata)
      newnode.next = head
      head = newnode
      
# Given a linkedlist by giving the head node of the LL, reverse the LL and return the head node of the reversed LL  1->2->3->4->5->NULL  gives output 5->4->3->2->1->NULL
def reverse(head):
  if head is None or head.next is None: return head
  rest = reverse(head.next)
  # 1 > 2 < 3 < 4
  head.next.next = head # 1 >< 2 < 3 < 4
